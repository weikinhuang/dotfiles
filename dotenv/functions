# Special cd replacement that shows up to the last 10 directories with 'cd --'.
function __cd_func() {
	local x2 the_new_dir adir index
	local -i cnt

	if [[ $1 ==	"--" ]]; then
		dirs -v
		return 0
	fi

	the_new_dir=$1
	[[ -z $1 ]] && the_new_dir=$HOME

	if [[ ${the_new_dir:0:1} == '-' ]]; then
		#
		# Extract dir N from dirs
		index=${the_new_dir:1}
		[[ -z $index ]] && index=1
		adir=$(dirs +$index)
		[[ -z $adir ]] && return 1
		the_new_dir=$adir
	fi

	# '~' has to be substituted by ${HOME}
	[[ ${the_new_dir:0:1} == '~' ]] && the_new_dir="${HOME}${the_new_dir:1}"

	# Now change to the new dir and add to the top of the stack
	pushd "${the_new_dir}" > /dev/null
	[[ $? -ne 0 ]] && return 1
	the_new_dir=$(pwd)

	# Trim down everything beyond 11th entry
	popd -n +11 2>/dev/null 1>/dev/null

	# Remove any other occurence of this dir, skipping the top of the stack
	for ((cnt=1; cnt <= 10; cnt++)); do
		x2=$(dirs +${cnt} 2>/dev/null)
		[[ $? -ne 0 ]] && return 0
		[[ ${x2:0:1} == '~' ]] && x2="${HOME}${x2:1}"
		if [[ "${x2}" == "${the_new_dir}" ]]; then
			popd -n +$cnt 2>/dev/null 1>/dev/null
			cnt=cnt-1
		fi
	done

	return 0
}

# Special repo status function for git and svn
function __repo_ps1() {
	local info=$(svn info 2> /dev/null)

	# if not a svn repo, then try the git method
	if [[ -z "$info" ]] ; then
		echo -n "$(__git_ps1)"
		return
	fi

	# if it is a svn repo, then strip info out of it
	local svnrev=$(echo "$info" | awk '/Revision:/ {print $2}')
	local flag=

	# if we want to show dirty state then exec svn status
	if [ $SVN_PS1_SHOWDIRTYSTATE ] ; then
		local state=$(svn status --ignore-externals "$(echo "$info" | sed -n "s/Working Copy Root Path: \(.\+\)/\1/p")" 2> /dev/null)

		# make the file status conditions unique if there are changes
		if [ -n "$state" ]; then
			flag=" *$(echo "$state" | awk '{print $1}' | uniq | sort | tr -d '\n')"
		fi
	fi

	echo -n " ($svnrev$flag)"
}

# push a command to the prompt command
function __push_prompt_command() {
	local command="${1/%;/}"
	PROMPT_COMMAND="$(echo "$(echo "${PROMPT_COMMAND/%;/}" | tr ';' '\n' | grep -v -F "$command" | grep -v '^ *$' | tr '\n' ';')${command};" | sed 's/;;/;/' | sed 's/^;//')"
}

# Count the number of files in a directory
function cf() {
	if [ -n "$1" ] ; then
		find "$1" -type f | wc -l
		return $?
	fi
	find . -type f | wc -l
	return $?
}

# find files with case-insensetive matching in current directory
function findhere() {
	find -iname "*$1*"
	return $?
}

# do a case-insensetive grep on all the files in a directory
function grip() {
	grep -ir "$1" .
	return $?
}

# Execute a command against each file in a directory
function execlist() {
	if [[ $# = 1 ]] ; then
		if [[ "$1" =~ "{}" ]] ; then
			ls -1A | xargs -r -I {} -P $PROC_CORES sh -c "$1"
			return $?
		else
			echo "Missing argument identifier {}."
		fi
	fi
	if [[ $# = 2 ]] ; then
		if [[ -d "$1" ]] ; then
			if [[ "$2" =~ "{}" ]] ; then
				ls -1A "$1" | xargs -r -I {} -P $PROC_CORES sh -c "$2"
				return $?
			else
				echo "Missing argument identifier {}."
			fi
		else
			echo "Directory not found!"
		fi
	fi
	return 1
}

# Execute a command against each file in a directory
function execlistcontext() {
	if [[ $# = 1 ]] ; then
		find . -mindepth 1 -maxdepth 1 -type d | xargs -r -I {} -P $PROC_CORES sh -c "cd \"{}\"; $1"
		return $?
	fi
	if [[ $# = 2 ]] ; then
		find "$1" -mindepth 1 -maxdepth 1 -type d | xargs -r -I {} -P $PROC_CORES sh -c "cd \"{}\"; $2"
		return $?
	fi
	return 1
}

# Execute a command against each file found in the current directory matching the search term
function execfind() {
	if [[ -n "$1" ]] ; then
		if [[ "$2" =~ "{}" ]] ; then
			find . -iname "$1" | xargs -r -I {} -P $PROC_CORES sh -c "$2"
			return $?
		else
			echo "Missing argument identifier {}."
		fi
	else
		echo "Missing search term."
	fi
	return 1
}

# Execute a command for each line in a file
function execcat() {
	if [[ ( -n "$1" ) && ( -f "$1" ) ]] ; then
		if [[ "$2" =~ "{}" ]] ; then
			cat "$1" | tr -d '\r' | xargs -r -I {} -P $PROC_CORES -r sh -c "$2"
			return $?
		else
			echo "Missing argument identifier {}."
		fi
	else
		echo "File not found."
	fi
	return 1
}

# Extract archives automatically
function extract () {
	if [ -f "$1" ] ; then
		case "$1" in
		*.tar.bz2)
			tar xjf "$@"
			;;
		*.tar.gz)
			tar xzf "$@"
			;;
		*.bz2)
			bunzip2 "$@"
			;;
		*.rar)
			rar x "$@"
			;;
		*.gz)
			gunzip "$@"
			;;
		*.tar)
			tar xf "$@"
			;;
		*.tbz2)
			tar xjf "$@"
			;;
		*.tgz)
			tar xzf "$@"
			;;
		*.zip)
			unzip "$@"
			;;
		*.Z)
			uncompress "$@"
			;;
		*.7z)
			7z x "$@"
			;;
		*)
			echo "'$1' cannot be extracted via extract()"
			;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}

# Get gzipped file size
function gz() {
	echo "orig size (bytes): "
	cat "$1" | wc -c
	echo "gzipped size (bytes): "
	gzip -c "$1" | wc -c
}

# Create a new directory and enter it
function md() {
	mkdir -p "$@" && cd "$@"
}

# Use Git's colored diff when available
if type git &> /dev/null; then
	function diff() {
		git diff --no-index --color "$@"
	}
fi

# Create a data URL from an image (works for other file types too, if you tweak the Content-Type afterwards)
function dataurl() {
	echo "data:image/${1##*.};base64,$(openssl base64 -in "$1")" | tr -d '\n'
}

# Gzip-enabled `curl`
function gurl() {
	curl -sH "Accept-Encoding: gzip" "$@" | gunzip
}

# Escape UTF-8 characters into their 3-byte format
function escape() {
	printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
	echo # newline
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
	perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
	echo # newline
}

# Get a character’s Unicode code point
function codepoint() {
	perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))"
	echo # newline
}

# Convert a unix timestamp to a date string
function unix2date() {
	if [[ -n "$1" ]] ; then
		echo "$1" | awk '{print strftime("%c", $1)}'
		return
	fi
	date
}

# Convert a date string to a unix timestamp
function date2unix() {
	if [[ -n "$1" ]] ; then
		date --date "$*" +%s
		return
	fi
	date +%s
}

# Convert the parameters or STDIN to lowercase.
function lc () {
	if [ $# -eq 0 ]; then
		tr '[:upper:]' '[:lower:]';
	else
		tr '[:upper:]' '[:lower:]' <<< "$@";
	fi;
}

# Convert the parameters or STDIN to uppercase.
function uc () {
	if [ $# -eq 0 ]; then
		tr '[:lower:]' '[:upper:]';
	else
		tr '[:lower:]' '[:upper:]' <<< "$@";
	fi;
}

# regex match and replace from: https://gist.github.com/opsb/4409156
function regex {
	gawk 'match($0, '$1', ary) { print ary['${2:-'0'}'] }';
}

# functionality to simplify making restful curl requests
export __request_host=""
function __request () {
	local options method url
	options=( )
	method="GET"
	# check what type of request we're making headers or body
	case "$1" in
		body )
			shift
			;;
		headers )
			options=("${options[@]}" "-s" "-S" "-D" "-" "-o" "/dev/null")
			shift
			;;
	esac
	# check what request method we are making
	case "$1" in
		HEAD|OPTIONS|GET|DELETE|POST|PUT|TRACE )
			method="$1"
			shift
			;;
	esac
	# this next parameter is always the url
	case "$1" in
		http://*|https://* )
			url="$1"
			__request_host="$(echo "$1" | perl -ane '/^(https?:\/\/[^\/]+)/; print $1')"
			echo "Future requests will be prepended with  '${__request_host}' if no host specified" > /dev/tty
			export __request_host
			shift
			;;
		* )
			url="${__request_host}/$(echo "$1" | sed 's/^\///')"
			echo "Requesting '${url}'" > /dev/tty
			shift
			;;
	esac
	curl -X "$method" "${options[@]}" "$@" "$url"
}

# include git __git_ps1 if not already included elsewhere
type __git_ps1 &> /dev/null || source "${HOME}/.dotenv/other/git-prompt.sh"
