#!/bin/bash
# Retieve a github token if not already generated
# To get the token: curl -i https://api.github.com/authorizations -u "GITHUB_USERNAME_HERE" -d '{"scopes":"repo","note":"GITHUB_TOKEN_NAME"}'

REUSE_EXISTING=1
if [[ "$1" == "-n" ]]; then
  REUSE_EXISTING=0
  shift
fi

# check if we want the token from github
UPSTREAM_HOST="github.com"
if [[ -n "$1" && "$1" != *github.com ]]; then
  UPSTREAM_HOST="$1"
fi

# if the -n flag is passed in, don't use the local store, just generate a new token
if [[ "${REUSE_EXISTING}" == 1 ]]; then
  # check the environment first
  if [[ "${UPSTREAM_HOST}" == *github.com ]] && [[ -n "$GIT_HUB_API_TOKEN" ]]; then
    echo "$GIT_HUB_API_TOKEN"
    exit 0
  fi
  # then check the gitconfig file
  if [[ "${UPSTREAM_HOST}" != "github.com" ]]; then
    EXISTING_TOKEN=$(git config --get "github.${UPSTREAM_HOST}.apitoken")
  else
    EXISTING_TOKEN=$(git config --get "github.apitoken")
  fi
  if [[ -n "$EXISTING_TOKEN" ]]; then
    echo "$EXISTING_TOKEN"
    exit 0
  fi
fi

# password auth via curl not available for most github enterprise setups
if [[ "${UPSTREAM_HOST}" != *github.com ]]; then
  echo "Github Enterprise token creation is not supported" >&2
  exit 1
fi

# Generate a token for the following username
read -p -r "Github username: " GITHUB_USERNAME
if [[ -z "$GITHUB_USERNAME" ]]; then
  echo "Github username required" >&2
  exit 1
fi

HOSTNAME=$(hostname)
# Grab the app token name, using hostname as the default
read -p -r "Github token name ($HOSTNAME): " GITHUB_TOKEN_NAME
if [[ -z "$GITHUB_TOKEN_NAME" ]]; then
  GITHUB_TOKEN_NAME="$HOSTNAME"
fi

GITHUB_TOKEN_RESPONSE=$(curl -i https://api.github.com/authorizations -u "$GITHUB_USERNAME" -d '{"scopes":"repo","note":"'"$GITHUB_TOKEN_NAME"'"}')

if [[ -z "$GITHUB_TOKEN_RESPONSE" ]]; then
  exit 1
fi

# output the curl request to stderr
echo "$GITHUB_TOKEN_RESPONSE" >&2

# If the response doesn't contain a token then exit with an error
if ! grep -q '"token":' <<<"$GITHUB_TOKEN_RESPONSE"; then
  exit 1
fi

# just grab out the token
GITHUB_TOKEN=$(echo "$GITHUB_TOKEN_RESPONSE" | grep '"token":' | sed 's/  *"token": *"\([A-Za-z0-9_][A-Za-z0-9_]*\)".*/\1/')

echo "$GITHUB_TOKEN"

# Write the token to the user's git config
if [[ "${REUSE_EXISTING}" == 1 ]]; then
  git config --file ~/.gitconfig.local github.apitoken "$GITHUB_TOKEN"
fi

exit 0
