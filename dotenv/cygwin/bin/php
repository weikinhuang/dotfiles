#!/bin/bash

# the name of the program
if [[ -f "$(cygpath -u "c:/Program Files/PHP/php.exe")" ]]; then
	PROGRAM=$(cygpath -u "c:/Program Files/PHP/php.exe")
elif [[ -f "$(cygpath -u "c:/Program Files (x86)/PHP/php.exe")" ]]; then
	PROGRAM=$(cygpath -u "c:/Program Files (x86)/PHP/php.exe")
elif [[ -f "$(cygpath -u "c:/PHP/php.exe")" ]]; then
	PROGRAM=$(cygpath -u "c:/PHP/php.exe")
else
	# php binary not found
	exit 1
fi

# if there are any baked in arguments they are defined here
args=(  )

IS_REPL_SHELL=""
for arg in "$@"
do
	# if argument is a file, then expand it to windows paths
	if [ -e "$arg" ]
	then
		# echo "arg $arg is a file"
		args=("${args[@]}" "$(cygpath -w "$arg")")
	else
		# echo "arg $arg is not a file"
		args=("${args[@]}" "$arg")
		if [ "$arg" == "-a" ]; then
			IS_REPL_SHELL=1
		fi
	fi
done

# test if we are in a pipe and pass stdin as last argument if we are piping in
if [ ! -t 0 ]
then
	"${PROGRAM}" "${args[@]}" <<< "$(cat -)"
else
	if [[ ${#args[@]} -eq 0 || -n $IS_REPL_SHELL ]]
	then

		# php script to simulate repl in cygwin, as php is compiled without readline
		winpty "${PROGRAM}" -r '
echo "Interactive mode enabled" . PHP_EOL . PHP_EOL;
$fp = fopen("php://stdin", "r");
$in = "";
do {
	if(!$in) {
		echo "php> ";
	}
	$in = $in . trim(fgets($fp));
	if($in) {
		if(substr($in, -1) === chr(92)) {
			$in = substr($in, 0, -1);
		} else {
			ob_start();
			eval($in);
			$res = ob_get_clean();
			echo $res;
			if(ord(substr($res, -1)) !== 10) {
				// the real shell does not do this as well
				// echo PHP_EOL;
			}
			$in = "";
		}
	}

} while($in !== "quit");'
	else
		"${PROGRAM}" "${args[@]}"
	fi
fi

exit $?
