#!/bin/bash

# show help message
if getopt_assert -?:--help "$@" > /dev/null; then
	echo 'usage symlink-reflow [-?|--help] [-c:--cygwin] [-f:--force] [-m:--maxdepth=levels] [FILE]
Convert cygwin symlinks to Windows NTFS links and vice versa
If FILE is passed in:
    If FILE is a symlink, it will be converted.
    If FILE is a directory, it will be searched instead of the current directory

-f, --force              do not prompt before each relink
-c, --cygwin             convert to cygwin symlinks (default is windows links)
-m, --maxdepth=levels    descend at most levels (a non-negative integer) levels of directories from FILE
-?, --help               display this message'
	exit 0
fi

# Spaces do not count as new delimiters
IFS=$'\n'
# keep reference to where we are now
CURRENT_PWD="$(readlink "$(pwd)")"

# see if we want to convert to a windows link or a cygwin link
LINK_TYPE="winlink"
if getopt_assert -c:--cygwin "$@" > /dev/null; then
	LINK_TYPE="cyglink"
fi

# see if we have to ask for each symlink
FORCE=
if getopt_assert -f:--force "$@" > /dev/null; then
	FORCE=1
fi

# see if we passed in a parameter to limit the depth of the search for symlinks
MAX_DEPTH_FLAG='-maxdepth'
MAX_DEPTH=$(getopt_assert -m:--maxdepth "$@")
if [[ -z $MAX_DEPTH || $MAX_DEPTH -lt 1 ]]; then
	MAX_DEPTH=
	MAX_DEPTH_FLAG=
fi

# make windows ntfs symlinks
function winlink () {
	local LINK OPTIONS LASTMODTIME TARGET DIRNAME BASENAME
	# params
	LINK="$1"
	OPTIONS=$2
	LASTMODTIME="$(find "$LINK" -maxdepth 0 -printf "%t")"
	TARGET="$(readlink "$LINK")"
	DIRNAME="$(dirname "$LINK")"
	BASENAME="$(basename "$LINK")"
	
	if [[ -n $(confirm "$LINK" "$TARGET") ]]; then
		return 0
	fi

	# delete the existing link
	rm -f "$LINK"

	# we want to make relative links whenever possible, so we should try going going into the directory first
	cd "$DIRNAME"

	if [[ ${TARGET:0:1} == "/" ]]; then
		# if absolute path then run it against cygpath
		cmd /c mklink $OPTIONS "$BASENAME" "$(cygpath -wa "$TARGET")"
	else
		# otherwise replace unix path separator with windows versions
		cmd /c mklink $OPTIONS "$BASENAME" "${TARGET//\//\\}"
	fi

	# give the new link the same file mod time as the previous link
	touch -h -d "$LASTMODTIME" "$BASENAME"

	# go back to the previous working directory
	cd "$CURRENT_PWD"
}

# make cygwin symlinks
function cyglink () {
	local LINK LASTMODTIME TARGET DIRNAME BASENAME
	# params
	LINK="$1"
	LASTMODTIME="$(find "$LINK" -maxdepth 0 -printf "%t")"
	TARGET="$(readlink "$LINK")"
	DIRNAME="$(dirname "$LINK")"
	BASENAME="$(basename "$LINK")"
	
	if [[ -n $(confirm "$LINK" "$TARGET") ]]; then
		return 0
	fi

	# delete the existing link
	rm -f "$LINK"

	# we want to make relative links whenever possible, so we should try going going into the directory first
	cd "$DIRNAME"

	# otherwise replace unix path separator with windows versions
	ln -s "$TARGET" "$BASENAME"
	if [[ $? == 0 ]]; then
		echo "symbolic link created for $LINK <<===>> $TARGET"
	fi

	# give the new link the same file mod time as the previous link
	touch -h -d "$LASTMODTIME" "$BASENAME"

	# go back to the previous working directory
	cd "$CURRENT_PWD"
}

# confirm that we want to create a symlink
function confirm () {
	# do we need to prompt?
	if [[ -z $FORCE ]]; then
		read -p "Relink '$1' => '$2'? " CONFIRM
		if [[ $CONFIRM != y* ]]; then
			echo "1"
			return;
		fi
	fi
}

# loop through arguments and see if we specified a path, a file, or nothing
while test $# -gt 0
do
	ARG="$1"
	shift
	# ignore arguments
	if [[ $ARG == -* ]]; then
		continue
	fi
	# if it's a link, then we need 
	if [[ -L "$ARG" ]]; then
		IS_LINK="$ARG"
		break
	fi
	# if it's a directory, let's search it
	if [[ -d "$ARG" ]]; then
		CURRENT_PWD="$(readlink -f "$ARG")"
		break
	fi
	
	# we don't know what to do
	echo "Invalid option: $ARG"
	exit 1
done

# if we're just converting a symlink
if [[ -n $IS_LINK ]]; then
	if [[ -d "$IS_LINK" ]]; then
		$LINK_TYPE "$IS_LINK" /D
	else
		$LINK_TYPE "$IS_LINK"
	fi
	exit 0
fi

# Relink all directories
for dir in $(find "$CURRENT_PWD" $MAX_DEPTH_FLAG $MAX_DEPTH -type l -print0 | xargs -0 -i find -L {} -type d -maxdepth 0)
do
	$LINK_TYPE "$dir" /D
done

# Relink all files
for file in $(find "$CURRENT_PWD" $MAX_DEPTH_FLAG $MAX_DEPTH -type l -print0 | xargs -0 -i find -L {} -type f -maxdepth 0)
do
	$LINK_TYPE "$file"
done
