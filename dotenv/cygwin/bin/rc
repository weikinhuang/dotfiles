#!/bin/bash

# show help message
if getopt_assert -?:--help:-h "$@" > /dev/null || [[ $# -eq 0 ]]; then
	echo 'Usage: rc [OPTION] FILE...
Sends a file to the Recycle Bin

  -f, --force           ignore nonexistent files, never prompt
  -r, -R, --recursive   remove directories and their contents recursively
  -v, --verbose         explain what is being done
  -h, -?, --help        display this help and exit

By default, rc does not remove directories.  Use the --recursive (-r or -R)
option to remove each listed directory, too, along with all of its contents.

To remove a file whose name starts with a "-", for example "-foo",
use this command:
  rc ./-foo'
	exit 0
fi

# Spaces do not count as new delimiters
IFS=$'\n'

# see if we want trash directories
RECURSE=
if getopt_assert -r:-R:--recursive "$@" > /dev/null; then
	RECURSE=1
fi

# see if we have to ask for each file
FORCE=
if getopt_assert -f:--force "$@" > /dev/null; then
	FORCE=1
fi

# see if we want to output for each file
VERBOSE=
if getopt_assert -v:--verbose "$@" > /dev/null; then
	VERBOSE=1
fi

# in case opts were condensed like -vfr
while getopts "vfrR" opt; do
	case $opt in
		v)
			VERBOSE=1
		;;
		f)
			FORCE=1
		;;
		r|R)
			RECURSE=1
		;;
	esac
done

# confirm that we want to create a symlink
function confirm () {
	# do we need to prompt?
	if [[ -z $FORCE ]]; then
		read -p "rc: recycle $1 '$2'? " CONFIRM
		if [[ $CONFIRM != y* ]]; then
			return 1;
		fi
	fi
	return 0
}

# loop through arguments and see if we specified a path, a file, or nothing
while test $# -gt 0
do
	ARG="$1"
	shift
	# ignore arguments
	if [[ $ARG == -* ]]; then
		continue
	fi
	# if it's a directory, we should ask if we should do it
	if [[ -d "$ARG" ]]; then
		for file in $(cygpath -w "$ARG")
		do
			if [[ -z $RECURSE ]]; then
				echo "rm: cannot remove '${file}': Is a directory"
				continue
			fi
			if ! confirm 'directory' "${file}"; then
				continue
			fi
			recycle "${file}"
			if [[ -n $VERBOSE ]]; then
				echo "recycled '${file}'"
			fi
		done
		continue
	fi
	# if it's a file, do the normal prompt
	if [[ -e "$ARG" ]]; then
		for file in $(cygpath -w "$ARG")
		do
			if ! confirm 'file' "${file}"; then
				continue
			fi
			recycle "${file}"
			if [[ -n $VERBOSE ]]; then
				echo "recycled '${file}'"
			fi
		done
		continue
	fi
	
	# we don't know what to do
	if [[ -z $FORCE ]]; then
		echo "rc: cannot recycle '${ARG}': No such file or directory"
		exit 1
	fi
done
