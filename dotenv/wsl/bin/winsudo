#!/bin/bash
#title              : winsudo
#description        : This script allows running a process with elevated windows privileges
#author             : Wei Kin Huang
#date               : 2018-10-13
#version            : 1.0.0
#usage              : winsudo [args...]
#requires           : powershell.exe, fsutil.exe, fltMC.exe ssh sshd
#==============================================================================

set -euo pipefail
IFS=$'\n\t'

#==============================================================================
# global variables
#==============================================================================
SSHD_PID_PORT=$(($$ + 32222))
WINSUDO_WORKDIR="${HOME}/.ssh/winsudosshd"

#==============================================================================
# internal functions
#==============================================================================
function internal::is-elevated-process() {
  local ret
  # Query admin rights http://stackoverflow.com/a/21295806/1641422
  fsutil.exe dirty query c: &>/dev/null
  ret=$?
  if [ ${ret} -eq 127 ]; then
    # If fail try another way http://stackoverflow.com/a/28268802
    fltMC.exe &>/dev/null
    ret=$?
  fi
  return $ret
}

function internal::escape-args() {
  if [[ $# == 0 ]]; then
    return
  fi
  local args=()
  for arg in "$@"; do
    # clean up weird windows issue
    args+=("$(printf '%q' "$arg" | sed "s/\\\\r'\$/'/")")
  done
  echo "${args[@]}"
  # for debugging arguments
  #echo "${args[@]}" >&2
}

function internal::cleanup() {
  if [[ ! -e "${WINSUDO_WORKDIR}/winsudo.${SSHD_PID_PORT}.pid" ]]; then
    return 0
  fi
  kill "$(cat "${WINSUDO_WORKDIR}/winsudo.${SSHD_PID_PORT}.pid")" || true
  rm -f "${WINSUDO_WORKDIR}/winsudo.${SSHD_PID_PORT}.pid"
}

function internal::ssh() {
  local SSH_OPTIONS=(
    -q
    -o "UserKnownHostsFile=/dev/null"
    -o "StrictHostKeyChecking=no"
    -o "ConnectTimeout=5"
    -i "${WINSUDO_WORKDIR}/ssh_ed25519_key"
    -p "${SSHD_PID_PORT}"
  )

  if [[ ! -t 0 && ! -t 1 ]]; then
    # pipe mode
    ssh "${SSH_OPTIONS[@]}" 127.0.0.1 -- "$@"
  else
    # non pipe mode
    ssh "${SSH_OPTIONS[@]}" -t 127.0.0.1 -- "$@"
  fi
}

function internal::ssh-with-cwd() {
  internal::ssh cd "$(printf '%q' "$(pwd)")" \&\>/dev/null\ \|\|\ true\ \; "$@"
}

function internal::ssh-with-login() {
  internal::ssh-with-cwd BASHRC_NONINTERACTIVE_BYPASS=1 source \~/.bashrc \&\>/dev/null\ \|\|\ true\ \; "$@"
}

function internal::ssh-gen-keys() {
  # setup winsudo workdir
  if [[ ! -d "${WINSUDO_WORKDIR}" ]]; then
    mkdir -p ~/.ssh/winsudosshd
  fi
  # setup winsudo sshd host key
  if [[ ! -e "${WINSUDO_WORKDIR}/ssh_host_ed25519_key" ]]; then
    ssh-keygen -q -N "" -t ed25519 -f "${WINSUDO_WORKDIR}/ssh_host_ed25519_key"
  fi
  # setup winsudo sshd client key
  if [[ ! -e "${WINSUDO_WORKDIR}/authorized_keys" ]] || [[ ! -e "${WINSUDO_WORKDIR}/ssh_ed25519_key" ]]; then
    rm -f "${WINSUDO_WORKDIR}/ssh_ed25519_key"
    ssh-keygen -q -N "" -t ed25519 -f "${WINSUDO_WORKDIR}/ssh_ed25519_key"
    cat "${WINSUDO_WORKDIR}/ssh_ed25519_key.pub" >"${WINSUDO_WORKDIR}/authorized_keys"
  fi
}

function internal::run-sshd() {
  # run sshd proxy under a elevated session
  if ! powershell.exe \
    Start-Process \
    -Verb RunAs \
    -WindowStyle Hidden \
    wsl.exe \"bash\", \""$(realpath "$(command -v __winsudoproxy.sh)")"\", \"${SSHD_PID_PORT}\" &>/dev/null; then
    echo "UAC elevation was canceled" >&2
    return 1
  fi

  # wait until sshd proxy is ready
  while ! nc -z 127.0.0.1 ${SSHD_PID_PORT}; do
    sleep 0.1 # wait for 1/10 of the second before check again
  done
}

function internal::main() {
  # if we're already an elevated, just execute the command
  if internal::is-elevated-process </dev/null; then
    if [[ $# == 0 ]]; then
      return 0
    fi
    exec "$@"
  fi

  # run elevated sshd server and wait for active connection
  # need to set stdin, otherwise powershell will read stdin and it will be lost by the next process
  internal::run-sshd </dev/null

  # if we're not running elevated processes, ssh into the elevated process
  if [[ $# == 0 ]]; then
    # open a elevated shell with no args
    internal::ssh-with-cwd \$SHELL -l
  else
    # run process elevated
    # shellcheck disable=SC2046
    internal::ssh-with-login $(internal::escape-args "$@")
  fi
}

#==============================================================================
# main
#==============================================================================
# clean sshd process that was created for a elevated prompt
trap internal::cleanup EXIT

internal::main "$@"
